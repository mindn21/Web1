import os
import pandas as pd
from datetime import datetime, date, timedelta
import sys
from tkinter import messagebox

messagebox.showinfo("파일닫기","모든 엑셀을 닫아주세요. 제발요")



# 폴더 경로
folder_path = '업로드'

df = pd.DataFrame()
df_in = pd.DataFrame()
df_out = pd.DataFrame()


# 정제데이터_2402_생성일+시간

def out(df):

    print('--------------------------------------------------------')
    print('출고데이터 가공을 시작합니다.')
    print('--------------------------------------------------------')
    

    # 문자열 형태의 날짜를 datetime 형태로 변환
    df['출고완료일'] = pd.to_datetime(df['출고완료일'])
    df = df.iloc[:-1]


    #!--------------------------------------------------------
    #! 이부분은 다음달이 되서 확인 해 봐야 함
    #!--------------------------------------------------------
    # 현재 날짜를 얻습니다.
    today = pd.Timestamp.now()

    # 이전 달의 데이터를 추출합니다.
    df = df[(df['출고완료일'].dt.year == today.year) & (df['출고완료일'].dt.month == today.month - 1)]


    #!--------------------------------------------------------
    #!--------------------------------------------------------

    #?----------------------------------------------------------------------------------
    #? 출고타입 기준으로 정제하기---------------------------------------------------------
    #?----------------------------------------------------------------------------------

    # 특정 조건을 만족하는 행 추출
    # 셋트출고 제외, 피킹완료 제외
    # "택배출고" + "용달" 이면서 "몰명"이 "로켓그로스, 로켓배송, 밀크런" 인것


    df = df[df['출고상태'] == '출고완료']
    df = df[(df['출고타입'] != '셋트출고')]
    df = df[(df['몰명'] != '불량존')]
    
    df_condition_true = df[((df['출고타입'] == '용달(퀵)출고') & (df['몰명'].str.contains('로켓그로스|로켓배송|밀크런'))) | (df['출고타입']=='택배출고')]


    # df_condition_true에 해당하는 행을 제외한 나머지 행 선택
    df_sheet2 = df[~df.index.isin(df_condition_true.index)].copy()



    #?----------------------------------------------------------------------------------
    #? 필요없는 브랜드 제외시키기
    #?----------------------------------------------------------------------------------

    brand_list = ['민스민 ', '원더와이드(wanderwide) ', '프로젝트 코랄 ','블러썸','힐어스 ']  # 브랜드 리스트

    # 'ITEMGROUP' 열의 값이 주어진 브랜드 리스트에 없는 행 선택
    df = df_condition_true[~df_condition_true['ITEMGROUP'].isin(brand_list)]    
    df_sheet2 = df_sheet2[~df_sheet2['ITEMGROUP'].isin(brand_list)]   


    #?----------------------------------------------------------------------------------
    #? 몰명 이상한거 걸르기
    #?----------------------------------------------------------------------------------

    mall_list = ['밀크런', '스마트스토어', 'Cafe24(신)', '쿠팡', '아임웹', '카카오톡선물하기', '신세계몰(신)', '고도몰5', 
        '11번가', '베이비하우스', '베럽몰', '로배택배', '기타', '오늘의집', '카카오톡스토어', '로켓그로스', '티몬', '위메프(신)',
        '사무실','사은품','불량 재발송(회수X)','불량 재발송(회수O)','파손 재발송(회수X)','파손 재발송(회수O)','협찬']

    # '몰명' 열의 값이 주어진 브랜드 리스트에 없는 행들은 별도 df로 저장
    df_mall_problem = df[~df['몰명'].isin(mall_list)].copy()



    #?----------------------------------------------------------------------------------
    #? 특정 조건들 반영하기
    #?----------------------------------------------------------------------------------

    # ITEMGROUP이 '에티튜드'이고 몰명이 '협찬'인 행의 인덱스를 가져옵니다.
    condition = (df['ITEMGROUP'] == '에티튜드') & (df['몰명'] == '협찬')
    indexes = df[condition].index

    # 인덱스를 사용하여 '구분(new)' 열에 '에티튜드 시딩'를 입력합니다.
    df.loc[indexes, '구분(new)'] = '에티튜드 시딩'
    


    # 새로운 열 추가 및 특정 열의 값에 따라 값 할당
    def assign_value(x):
        if x == '파손 재발송(회수O)':
            return '출고'
        elif x == '파손 재발송(회수X)':
            return '파손'
        elif x == '불량 재발송(회수O)':
            return '출고'
        elif x == '불량 재발송(회수X)':
            return '불량'
        
        elif x == '협찬':
            return '샘플'
        elif x == '사무실':
            return '샘플'
        elif x == '사은품':
            return '샘플'
        
        else:
            return '출고'


    # 조건에 해당하지 않는 행에는 assign_value 함수를 적용하여 '구분(new)' 열에 값을 할당합니다.
    #! "협찬" 인것들 전부 다 걸러지는거 아닌지???
    df.loc[~condition, '구분(new)'] = df.loc[~condition, '몰명'].apply(assign_value)



    #?--------------------------------------------------------
    #? 출력을 위한 정제작업
    #?--------------------------------------------------------
    
    df.loc[:, '단위'] = 1
    df['자료출처'] = '출고데이터'
    
    # 원하는 칼럼 추출 및 순서대로 정렬
    selected_columns = ['출고완료일', '사방넷 주문번호','구분(new)','몰명','품목코드(구성품)','품목명','단위','출고완료','자료출처']  # 추출하고자 하는 칼럼들과 원하는 순서로 정렬
    df = df[selected_columns]
    df.columns = ['일자', '주문번호', '구분(new)','구분', '상품코드','품목명','단위(EA)','수량','자료출처']



    # Sheet2 로 나갈것들
    selected_columns_sheet2 = ['출고일','출고완료일','출고타입','출고상태','품목코드(구성품)','품목명','수취인','주소','출고완료','비고','몰명','부주문번호','사방넷 주문번호']
    df_sheet2 = df_sheet2[selected_columns_sheet2]

    # Sheet3 로 나갈것
    df_mall_problem = df_mall_problem[selected_columns_sheet2]

    #?----------------------------------------------------------------

    print('출고데이터 가공을 완료 했습니다.')
    print('--------------------------------------------------------')
    

    return df, df_sheet2, df_mall_problem


def returnn(df):
    print('--------------------------------------------------------')
    print('반품 데이터 가공을 시작합니다.')
    print('--------------------------------------------------------')

    # 문자열 형태의 날짜를 datetime 형태로 변환
    df['입고실적일'] = pd.to_datetime(df['입고실적일'])
    df = df.iloc[:-1]

    #!--------------------------------------------------------
    #! 이부분은 다음달이 되서 확인 해 봐야 함
    #!--------------------------------------------------------
    # 현재 날짜를 얻습니다.
    today = pd.Timestamp.now()

    # 이전 달의 데이터를 추출합니다.
    df = df[(df['입고실적일'].dt.year == today.year) & (df['입고실적일'].dt.month == today.month - 1)]

    #!--------------------------------------------------------
    #!--------------------------------------------------------


    #?----------------------------------------------------------------------------------
    #? 필요없는 브랜드 제외시키기
    #?----------------------------------------------------------------------------------

    brand_list = ['민스민 ', '원더와이드(wanderwide) ', '프로젝트 코랄 ','블러썸','힐어스 ']  # 브랜드 리스트

    # 'ITEMGROUP' 열의 값이 주어진 브랜드 리스트에 없는 행 선택
    df = df[~df['ITEMGROUP'].isin(brand_list)]    





    
    # 불량, 파손품은 한번 더 출고하기 위해서 만든 것
    df_out2 = df.copy()
    #print(df_out2['반품확정수량'])

    if (df['반품확정수량'] == 0).any():
        print('경고: 반품확정 수량이 0인 게 있습니다. 프로그램 종료 후 확인 해 주세요.')
        print('--------------------------------------------------------')


    #?--------------------------------------------------------
    #?--------------------------------------------------------

    # 새로운 열 추가 및 특정 열의 값에 따라 값 할당
    def assign_value(x):
        if x == '불량품':
            return '반품'
        elif x == '파손품':
            return '반품'
        elif x == '정상품':
            return '반품'
        else:
            return '출고'

    df['구분(new)'] = df['DAMAGEFLG'].apply(assign_value)


    #?--------------------------------------------------------
    #?--------------------------------------------------------

    # 특정 열의 값을 숫자로 변환하고 -1을 곱해주는 함수 정의
    def multiply_by_minus_one(x):
        try:
            return int(x) * -1  # 문자열을 정수로 변환하고 -1을 곱해줌
        except ValueError:  # 숫자로 변환할 수 없는 경우에는 그대로 반환
            return x

    # 특정 열의 값을 숫자로 변환하고 -1을 곱해줌
    df['반품확정수량'] = df['반품확정수량'].apply(multiply_by_minus_one)


    #?--------------------------------------------------------
    #?--------------------------------------------------------
    #? 파손, 불량인것 들은 그 이름으로 한번 더 출고
    #?--------------------------------------------------------
    #?--------------------------------------------------------

    # 특정 조건을 만족하는 행 선택하여 복사. 불량, 파손품 한번 더 출고하기 위함
    # 다만 위에서 값이 "반품" 으로 되어 있으니까 다시 수정해야 함
    df_copy = df_out2[df_out2['DAMAGEFLG'].isin(['불량품', '파손품'])].copy()

    def assign_value2(x):
        if x == '불량품':
            return '불량'
        elif x == '파손품':
            return '파손'
        else:
            return '출고'

    df_copy['구분(new)'] = df_copy['DAMAGEFLG'].apply(assign_value2)
    #print(df_copy['반품확정수량'])


    df = pd.concat([df, df_copy], ignore_index=True)

    #?--------------------------------------------------------
    #?--------------------------------------------------------

    df['단위'] = 1
    df['자료출처'] = '반품데이터'

    # 원하는 칼럼 추출 및 순서대로 정렬
    selected_columns = ['입고실적일', '반품송장번호','구분(new)','DAMAGEFLG','품목코드','품목명','단위','반품확정수량','자료출처']  # 추출하고자 하는 칼럼들과 원하는 순서로 정렬
    df = df[selected_columns]
    df.columns = ['일자', '주문번호', '구분(new)','구분', '상품코드','품목명','단위(EA)','수량','자료출처']

    print('반품 데이터 가공을 완료했습니다.')
    print('--------------------------------------------------------')

    return df


def inn(df):
    print('--------------------------------------------------------')
    print('입고 데이터 가공을 시작합니다.')
    print('--------------------------------------------------------')

    # 문자열 형태의 날짜를 datetime 형태로 변환
    df['입고실적일'] = pd.to_datetime(df['입고실적일'])
    df = df.iloc[:-1]

    #!--------------------------------------------------------
    #! 이부분은 다음달이 되서 확인 해 봐야 함
    #!--------------------------------------------------------
    # 현재 날짜를 얻습니다.
    today = pd.Timestamp.now()

    # 이전 달의 데이터를 추출합니다.
    df = df[(df['입고실적일'].dt.year == today.year) & (df['입고실적일'].dt.month == today.month - 1)]


    #!--------------------------------------------------------
    #!--------------------------------------------------------


    #?----------------------------------------------------------------------------------
    #? 필요없는 브랜드 제외시키기
    #?----------------------------------------------------------------------------------

    brand_list = ['민스민 ', '원더와이드(wanderwide) ', '프로젝트 코랄 ','블러썸','힐어스 ']  # 브랜드 리스트

    # 'ITEMGROUP' 열의 값이 주어진 브랜드 리스트에 없는 행 선택
    df = df[~df['ITEMGROUP'].isin(brand_list)]    

    out_list = ['반품입고','셋트입고']
    # 'ITEMGROUP' 열의 값이 주어진 브랜드 리스트에 없는 행 선택
    df = df[~df['입고타입'].isin(out_list)]    

    print('입고 데이터 가공을 완료했습니다.')
    print('--------------------------------------------------------')

    return df



#!----------------------------------------------------------------


try:
    # 폴더 내의 파일 목록을 가져옴
    file_list = os.listdir(folder_path)

    # 파일 개수 확인
    file_count = len(file_list)

    # 파일의 개수가 3개인 경우 에러 발생
    if file_count >= 4:
        messagebox.showerror("에러", "폴더 내에 있는 파일의 개수가 4개 이상입니다. 프로그램을 종료합니다.")
        quit()

    # elif file_count == 1:
    #     messagebox.showerror("에러", "폴더 내에 있는 파일의 개수가 1개입니다. 빠진 파일을 확인하세요. 프로그램을 종료합니다.")
    #     quit()

    else:

        for filename in os.listdir(folder_path):
            if filename.endswith(('.xlsx', '.xls')):
                # 엑셀 파일 경로
                excel_file = os.path.join(folder_path, filename)
                # 엑셀 파일 불러오기
                df = pd.read_excel(excel_file)

                # 특정 열이 있는지 확인하고 동작 수행
                if '주문일' in df.columns:
                    df_out1, df_out2, df_out3 = out(df)
                    pass

                elif '반품송장번호' in df.columns:
                    df_re = returnn(df)
                    pass

                elif '상품비고' in df.columns:
                    df_in = inn(df)
                    pass

                else:
                    # 둘 다 없으면 메시지 박스를 통해 사용자에게 알리고 프로그램 종료
                    messagebox.showerror("에러", "올바른 파일을 업로드하세요.")
                    sys.exit()



        print('--------------------------------------------------------')
        print('concat DataFrame')
        print('--------------------------------------------------------')
        # 두 개의 데이터프레임을 합치고, 새로운 열 이름 지정
        df = pd.concat([df_out1, df_re], axis=0, ignore_index=True)  # ignore_index=True로 지정하면 열 인덱스가 재설정됨

        # 연-월-일 형식의 데이터를 연-월-일로 변경
        df['일자'] = pd.to_datetime(df['일자'], errors='coerce').dt.strftime('%Y-%m-%d')


        import datetime

        # 현재 날짜 및 시간
        now = datetime.datetime.now()

        # 년도 두 자리
        year = now.year % 100

        # 월 두 자리
        month = '{:02d}'.format(now.month)

        # 시간 및 분
        hour = '{:02d}'.format(now.hour)
        minute = '{:02d}'.format(now.minute)

        # 출력
        formatted_datetime = f"{year}{month}_{hour}{minute}"


        print('모든 데이터를 엑셀로 출럭합니다 (시간 소요)')
        print('--------------------------------------------------------')


        # 저장할 엑셀 파일 경로
        excel_file_path = '정제데이터_'+ formatted_datetime + '.xlsx'

        # DataFrame을 기존의 Excel 파일에 덮어쓰기
        with pd.ExcelWriter(excel_file_path, mode='w', engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Sheet1', index=False)  # df를 Sheet1에 쓰기
            df_out2.to_excel(writer, sheet_name='출고타입 이상', index=False)  # df_out2를 Sheet2에 쓰기
            df_out3.to_excel(writer, sheet_name='몰명 이상', index=False)  # df_out2를 Sheet2에 쓰기
            df_in.to_excel(writer, sheet_name='입고데이터', index=False)  # df_out2를 Sheet2에 쓰기


        print('데이터 정제 및 출력이 모두 완료 되었습니다.')
        print('--------------------------------------------------------')
        input("Press Enter to exit...")

except Exception as e:
    print("An error occurred:", e)
    input("Press Enter to exit...")